// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import{primitives as t}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number-array@v0.1.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-typed-array-like@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@v0.1.1-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-f-cdf@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-f-quantile@v0.1.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-variance@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-min@v0.1.1-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pinf@v0.1.1-esm/index.mjs";import{isPrimitive as d}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.1.1-esm/index.mjs";import{isPrimitive as m}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.1.1-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import{isPrimitive as h}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@v0.1.1-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@v0.1.1-esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@v0.1.0-esm/index.mjs";import{isPrimitive as j}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.1.1-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@v0.1.0-esm/index.mjs";function b(t){var i,e,s;if(e=4,i=!0,arguments.length>0){if(!p(t))throw new TypeError(a("invalid argument. First argument must be an object. Value: `%s`.",t));if(c(t,"digits")){if(!f(t.digits))throw new TypeError(a("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));e=t.digits}if(c(t,"decision")){if(!j(t.decision))throw new TypeError(a("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));i=t.decision}}switch(s="",s+=this.method,s+="\n\n",s+="Alternative hypothesis: ",s+="True ratio in variances is ",this.alternative){case"less":s+="less than ";break;case"greater":s+="greater than ";break;default:s+="not equal to "}return s+=this.nullValue,s+="\n\n",s+="    pValue: "+u(this.pValue,-e)+"\n",s+="    statistic: "+u(this.statistic,-e)+"\n",s+="    variance of x: "+u(this.xvar,-e),s+=" (df of x: "+u(this.dfX,-e)+")\n",s+="    variance of y: "+u(this.yvar,-e),s+=" (df of y: "+u(this.dfY,-e)+")\n",s+="    "+100*(1-this.alpha)+"% confidence interval: ["+u(this.ci[0],-e)+","+u(this.ci[1],-e)+"]",s+="\n\n",i&&(s+="Test Decision: ",this.rejected?s+="Reject null in favor of alternative at "+100*this.alpha+"% significance level":s+="Fail to reject null in favor of alternative at "+100*this.alpha+"% significance level",s+="\n"),s}function g(f,j,u){var g,w,x,y,E,T,V,O,k,F,P,q,R,X,Y;if(!i(f)&&!t(f))throw new TypeError(a("invalid argument. First argument must be a numeric array. Value: `%s`.",f));if(!i(j)&&!t(j))throw new TypeError(a("invalid argument. Second argument must be a numeric array. Value: `%s`.",j));if(T={},u&&(q=function(t,i){return p(i)?c(i,"alpha")&&(t.alpha=i.alpha,!d(t.alpha)||v(t.alpha))?new TypeError(a("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha)):c(i,"alternative")&&(t.alternative=i.alternative,!h(t.alternative))?new TypeError(a("invalid option. `%s` option must be a string. Option: `%s`.","alternative",t.alternative)):c(i,"ratio")&&(t.ratio=i.ratio,!m(t.ratio)||v(t.ratio))?new TypeError(a("invalid option. `%s` option must be a positive number. Option: `%s`.","ratio",t.ratio)):null:new TypeError(a("invalid argument. Options argument must be an object. Value: `%s`.",i))}(T,u),q))throw q;if(x=T.ratio||1,(w=void 0===T.alpha?.05:T.alpha)<0||w>1)throw new RangeError(a("invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.","alpha",w));switch(X=f.length-1,Y=j.length-1,k=r(f.length,1,f,1),F=r(j.length,1,j,1),V=s(O=(g=k/F)/x,X,Y),P=T.alternative||"two-sided"){case"two-sided":V=2*o(V,1-V),E=[g/n(1-(y=w/2),X,Y),g/n(y,X,Y)];break;case"greater":V=1-V,E=[g/n(1-w,X,Y),l];break;case"less":E=[0,g/n(w,X,Y)];break;default:throw new Error(a('invalid option. `%s` option must be one of the following: "%s". Option: `%s`.',"alternative",["two-sided","less","greater"].join('", "'),P))}return e(R={},"rejected",V<=w),e(R,"alpha",w),e(R,"pValue",V),e(R,"statistic",O),e(R,"ci",E),e(R,"alternative",P),e(R,"xvar",k),e(R,"yvar",F),e(R,"dfX",X),e(R,"dfY",Y),e(R,"method","F test for comparing two variances"),e(R,"nullValue",x),e(R,"print",b),R}export{g as default};
//# sourceMappingURL=index.mjs.map
