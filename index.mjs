// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number-array@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-typed-array-like@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-f-cdf@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-f-quantile@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-variance@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-min@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pinf@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@esm/index.mjs";var g=l.isPrimitive,b=m.isPrimitive,w=p,x=h.isPrimitive,y=v,E=c,T=a;var V=function(t,e){return w(e)?E(e,"alpha")&&(t.alpha=e.alpha,!g(t.alpha)||y(t.alpha))?new TypeError(T("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha)):E(e,"alternative")&&(t.alternative=e.alternative,!x(t.alternative))?new TypeError(T("invalid option. `%s` option must be a string. Option: `%s`.","alternative",t.alternative)):E(e,"ratio")&&(t.ratio=e.ratio,!b(t.ratio)||y(t.ratio))?new TypeError(T("invalid option. `%s` option must be a positive number. Option: `%s`.","ratio",t.ratio)):null:new TypeError(T("invalid argument. Options argument must be an object. Value: `%s`.",e))},O=j,k=p,F=f.isPrimitive,P=c,q=u,R=a;var X=function(t){var e,i,s;if(i=4,e=!0,arguments.length>0){if(!k(t))throw new TypeError(R("invalid argument. First argument must be an options object. Value: `%s`.",t));if(P(t,"digits")){if(!O(t.digits))throw new TypeError(R("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));i=t.digits}if(P(t,"decision")){if(!F(t.decision))throw new TypeError(R("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));e=t.decision}}switch(s="",s+=this.method,s+="\n\n",s+="Alternative hypothesis: ",s+="True ratio in variances is ",this.alternative){case"two-sided":default:s+="not equal to ";break;case"less":s+="less than ";break;case"greater":s+="greater than "}return s+=this.nullValue,s+="\n\n",s+="    pValue: "+q(this.pValue,-i)+"\n",s+="    statistic: "+q(this.statistic,-i)+"\n",s+="    variance of x: "+q(this.xvar,-i),s+=" (df of x: "+q(this.dfX,-i)+")\n",s+="    variance of y: "+q(this.yvar,-i),s+=" (df of y: "+q(this.dfY,-i)+")\n",s+="    "+100*(1-this.alpha)+"% confidence interval: ["+q(this.ci[0],-i)+","+q(this.ci[1],-i)+"]",s+="\n\n",e&&(s+="Test Decision: ",this.rejected?s+="Reject null in favor of alternative at "+100*this.alpha+"% significance level":s+="Fail to reject null in favor of alternative at "+100*this.alpha+"% significance level",s+="\n"),s},Y=t.primitives,A=e,D=i,I=s,S=r,z=n,B=a,C=o,G=d,H=V,J=X;var K=function(t,e,i){var s,r,n,a,o,d,l,m,p,h,v,c,j,f,u;if(!A(t)&&!Y(t))throw new TypeError(B("invalid argument. First argument `x` must be a numeric array. Value: `%s`.",t));if(!A(e)&&!Y(e))throw new TypeError(B("invalid argument. Second argument `y` must be a numeric array. Value: `%s`.",e));if(d={},i&&(c=H(d,i)))throw c;if(n=d.ratio||1,(r=void 0===d.alpha?.05:d.alpha)<0||r>1)throw new RangeError(B("invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.",r));switch(f=t.length-1,u=e.length-1,p=z(t.length,1,t,1),h=z(e.length,1,e,1),l=I(m=(s=p/h)/n,f,u),v=d.alternative||"two-sided"){case"two-sided":l=2*C(l,1-l),o=[s/S(1-(a=r/2),f,u),s/S(a,f,u)];break;case"greater":l=1-l,o=[s/S(1-r,f,u),G];break;case"less":o=[0,s/S(r,f,u)];break;default:throw new Error(B("Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.",v))}return D(j={},"rejected",l<=r),D(j,"alpha",r),D(j,"pValue",l),D(j,"statistic",m),D(j,"ci",o),D(j,"alternative",v),D(j,"xvar",p),D(j,"yvar",h),D(j,"dfX",f),D(j,"dfY",u),D(j,"method","F test for comparing two variances"),D(j,"nullValue",n),D(j,"print",J),j};export{K as default};
//# sourceMappingURL=index.mjs.map
