// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import{primitives as t}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number-array@v0.2.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-typed-array-like@v0.2.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-f-cdf@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-f-quantile@v0.1.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-variance@v0.2.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-min@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pinf@esm/index.mjs";import{isPrimitive as l}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.2.0-esm/index.mjs";import{isPrimitive as m}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.2.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import{isPrimitive as h}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@v0.2.0-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import{isPrimitive as b}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.2.0-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@esm/index.mjs";function w(t){var i,e,s;if(e=4,i=!0,arguments.length>0){if(!u(t))throw new TypeError(j("invalid argument. First argument must be an object. Value: `%s`.",t));if(c(t,"digits")){if(!f(t.digits))throw new TypeError(j("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));e=t.digits}if(c(t,"decision")){if(!b(t.decision))throw new TypeError(j("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));i=t.decision}}switch(s="",s+=this.method,s+="\n\n",s+="Alternative hypothesis: ",s+="True ratio in variances is ",this.alternative){case"less":s+="less than ";break;case"greater":s+="greater than ";break;default:s+="not equal to "}return s+=this.nullValue,s+="\n\n",s+="    pValue: "+g(this.pValue,-e)+"\n",s+="    statistic: "+g(this.statistic,-e)+"\n",s+="    variance of x: "+g(this.xvar,-e),s+=" (df of x: "+g(this.dfX,-e)+")\n",s+="    variance of y: "+g(this.yvar,-e),s+=" (df of y: "+g(this.dfY,-e)+")\n",s+="    "+100*(1-this.alpha)+"% confidence interval: ["+g(this.ci[0],-e)+","+g(this.ci[1],-e)+"]",s+="\n\n",i&&(s+="Test Decision: ",this.rejected?s+="Reject null in favor of alternative at "+100*this.alpha+"% significance level":s+="Fail to reject null in favor of alternative at "+100*this.alpha+"% significance level",s+="\n"),s}function x(f,u,b){var g,x,y,E,T,V,O,k,F,P,q,R,X,Y,A;if(!i(f)&&!t(f))throw new TypeError(a("invalid argument. First argument must be a numeric array. Value: `%s`.",f));if(!i(u)&&!t(u))throw new TypeError(a("invalid argument. Second argument must be a numeric array. Value: `%s`.",u));if(V={},b&&(R=function(t,i){return p(i)?c(i,"alpha")&&(t.alpha=i.alpha,!l(t.alpha)||v(t.alpha))?new TypeError(j("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha)):c(i,"alternative")&&(t.alternative=i.alternative,!h(t.alternative))?new TypeError(j("invalid option. `%s` option must be a string. Option: `%s`.","alternative",t.alternative)):c(i,"ratio")&&(t.ratio=i.ratio,!m(t.ratio)||v(t.ratio))?new TypeError(j("invalid option. `%s` option must be a positive number. Option: `%s`.","ratio",t.ratio)):null:new TypeError(j("invalid argument. Options argument must be an object. Value: `%s`.",i))}(V,b),R))throw R;if(y=V.ratio||1,(x=void 0===V.alpha?.05:V.alpha)<0||x>1)throw new RangeError(a("invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.","alpha",x));switch(Y=f.length-1,A=u.length-1,F=r(f.length,1,f,1),P=r(u.length,1,u,1),O=s(k=(g=F/P)/y,Y,A),q=V.alternative||"two-sided"){case"two-sided":O=2*o(O,1-O),T=[g/n(1-(E=x/2),Y,A),g/n(E,Y,A)];break;case"greater":O=1-O,T=[g/n(1-x,Y,A),d];break;case"less":T=[0,g/n(x,Y,A)];break;default:throw new Error(a('invalid option. `%s` option must be one of the following: "%s". Option: `%s`.',"alternative",["two-sided","less","greater"].join('", "'),q))}return e(X={},"rejected",O<=x),e(X,"alpha",x),e(X,"pValue",O),e(X,"statistic",k),e(X,"ci",T),e(X,"alternative",q),e(X,"xvar",F),e(X,"yvar",P),e(X,"dfX",Y),e(X,"dfY",A),e(X,"method","F test for comparing two variances"),e(X,"nullValue",y),e(X,"print",w),X}export{x as default};
//# sourceMappingURL=index.mjs.map
